package niuhaihang.test;

import java.io.*;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.security.Signature;
import java.util.Arrays;
import java.util.Date;

public class SignatureTest {
	
	private static byte[] pubKey = {
			48, -126, 1, 34, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 3, -126, 1, 15, 0, 48, -126, 1, 10, 2, 
			-126, 1, 1, 0, -96, 101, 117, 67, -94, 71, 100, 0, 13, -79, 28, -74, 80, -78, 76, 118, 66, 66, 123, 94, 35, 86, 
			-62, 94, 86, -61, 83, 119, -115, 104, -98, -44, -99, 126, 89, -128, -10, -89, 63, 90, 67, -76, 32, -92, 67, -17, 
			117, 82, 124, -88, 9, 1, -26, 5, -29, 70, -2, 120, -73, 52, -115, -123, 91, 47, -23, -45, 92, 37, 74, -46, -83, 
			-22, 30, 74, -37, 124, -38, -64, 106, -99, 116, -45, 106, 37, 42, 101, 84, -17, 95, -92, 94, -46, 69, -93, 99, 72, 
			93, 40, -85, -43, 51, 46, 94, 33, 88, 124, -42, -110, 75, -114, -106, 90, -14, 115, 89, 57, -108, -19, 32, 81, 36, 
			-73, 125, -75, 2, 1, -75, -4, -104, 59, -107, 51, -64, 15, -38, 97, -74, -55, 27, -11, 46, 7, -113, -22, -122, -48, 
			-104, -125, -114, -81, -42, 10, 79, 83, 5, -28, -106, -23, 90, 114, 106, 73, 70, -70, -61, -4, 100, -98, -59, -47, 
			75, -47, 52, 17, -127, 70, -109, -88, -62, -53, -15, -98, -31, -125, 17, -77, 14, 49, 2, -72, -97, 113, 97, 40, -3, 
			-31, 116, 54, 34, 2, 84, -80, -46, 115, 66, 97, 31, 110, 83, 0, -42, 59, -80, 127, 74, -60, -53, -109, -24, 108, 45, 
			93, -76, -38, -88, 102, 22, -80, -108, -69, 94, 115, -90, -1, -78, 111, 123, 87, -50, 101, -5, -122, -42, 16, -7, -5, 
			14, -105, 61, 82, 102, -114, 96, -113, 35, -89, 2, 3, 1, 0, 1
			};
	
	private static byte[] priKey = {
			48, -126, 4, -66, 2, 1, 0, 48, 13, 6, 9, 42, -122, 72, -122, -9, 13, 1, 1, 1, 5, 0, 4, 
			-126, 4, -88, 48, -126, 4, -92, 2, 1, 0, 2, -126, 1, 1, 0, -96, 101, 117, 67, -94, 71, 
			100, 0, 13, -79, 28, -74, 80, -78, 76, 118, 66, 66, 123, 94, 35, 86, -62, 94, 86, -61, 83, 
			119, -115, 104, -98, -44, -99, 126, 89, -128, -10, -89, 63, 90, 67, -76, 32, -92, 67, -17, 
			117, 82, 124, -88, 9, 1, -26, 5, -29, 70, -2, 120, -73, 52, -115, -123, 91, 47, -23, -45, 
			92, 37, 74, -46, -83, -22, 30, 74, -37, 124, -38, -64, 106, -99, 116, -45, 106, 37, 42, 101, 
			84, -17, 95, -92, 94, -46, 69, -93, 99, 72, 93, 40, -85, -43, 51, 46, 94, 33, 88, 124, -42, 
			-110, 75, -114, -106, 90, -14, 115, 89, 57, -108, -19, 32, 81, 36, -73, 125, -75, 2, 1, -75, 
			-4, -104, 59, -107, 51, -64, 15, -38, 97, -74, -55, 27, -11, 46, 7, -113, -22, -122, -48, -104, 
			-125, -114, -81, -42, 10, 79, 83, 5, -28, -106, -23, 90, 114, 106, 73, 70, -70, -61, -4, 100, 
			-98, -59, -47, 75, -47, 52, 17, -127, 70, -109, -88, -62, -53, -15, -98, -31, -125, 17, -77, 
			14, 49, 2, -72, -97, 113, 97, 40, -3, -31, 116, 54, 34, 2, 84, -80, -46, 115, 66, 97, 31, 110, 
			83, 0, -42, 59, -80, 127, 74, -60, -53, -109, -24, 108, 45, 93, -76, -38, -88, 102, 22, -80, 
			-108, -69, 94, 115, -90, -1, -78, 111, 123, 87, -50, 101, -5, -122, -42, 16, -7, -5, 14, -105, 
			61, 82, 102, -114, 96, -113, 35, -89, 2, 3, 1, 0, 1, 2, -126, 1, 0, 68, -67, -106, -73, 8, -70, 
			93, -30, 35, -4, 14, -39, 23, -42, -126, 44, -128, -109, 43, 122, 25, -35, 25, -22, 2, 119, 45, 
			-77, 99, -8, 61, 113, -45, -103, -115, -44, 86, 97, 49, 38, -121, 51, -112, 117, -75, -29, -49, 
			61, 45, -51, 122, 38, -59, 37, 42, -43, -121, 67, -57, 8, -113, -54, 98, 93, 51, 113, -16, -32, 
			-50, -93, 98, 3, -97, 61, -25, -71, 39, -85, 37, 70, 28, 6, 107, 76, 72, 82, 43, 71, 119, -114, 
			-29, 80, 108, -91, -20, 107, -37, -7, 13, 67, -114, -18, -59, 74, -73, 56, -79, 96, -5, 94, -67, 
			-109, 118, -86, -10, -57, 85, -53, 22, 121, -112, 41, -49, -121, 30, -72, 10, -4, -22, 108, -64, 
			-91, 77, 110, -6, 20, 41, 36, 112, -43, -105, -25, -81, -55, 7, -80, -32, 75, 72, 105, 62, -102, 
			-92, -120, -11, -58, -35, 65, -117, 48, -60, -53, 105, 56, 75, 119, -87, 91, -65, -38, -41, -14, 43, 
			-103, 113, -68, -61, 108, 66, -14, 10, 42, -118, -65, 100, 89, -42, -5, -75, 104, -86, 39, 33, 37, 
			-18, -51, 29, -35, 55, -101, -69, -19, 4, 78, 31, -114, 13, 42, -9, -55, 61, 22, 82, -26, 16, -112, 
			91, -42, 72, 73, -111, -11, -115, 70, -117, 4, 24, -6, 110, -25, 42, -90, -14, -83, 25, -98, 97, 55, 
			115, -124, 81, -70, 3, 117, 3, 112, 119, 44, -13, 35, -5, 18, 73, 11, -78, -31, 2, -127, -127, 0, -28, 
			-53, 65, 26, 21, -80, -11, 82, -116, 25, -27, -43, -61, 29, -89, 79, -37, 17, 6, 28, 86, -116, 20, -88, 
			-81, 13, -59, -4, 81, -29, -58, -52, -40, 94, 27, -123, 29, -114, 47, 116, -59, -46, 87, -53, -67, -99, 3, 
			-112, -26, -66, 74, -73, -79, -12, -5, -106, 104, -27, -33, 78, 57, 3, 117, 83, -109, -32, 112, 49, -66, 
			-27, -116, -125, 22, -53, -110, 94, 41, 10, 41, -127, -65, 9, 14, 36, -48, -57, -108, -2, 44, -14, 1, -106, 
			5, -15, -15, 56, 33, -125, -46, 112, -79, 59, -60, 17, -21, -16, 18, -79, 5, -94, 6, 46, 74, 29, -49, -27, 
			112, -94, 27, -25, -14, -103, 38, -123, -90, 50, -74, 49, 2, -127, -127, 0, -77, 120, 26, 66, 71, 119, 95, 
			42, 90, 119, 105, -107, 69, 94, 77, -41, -120, -114, -42, 43, 23, -25, -26, 108, -127, -18, -116, -96, 63, 
			9, -9, 68, 11, 105, -20, -83, 107, 1, 13, -74, 108, -5, 109, 125, -101, 6, -83, 17, 33, 22, -19, 41, 100, 
			-75, 126, 28, 72, 45, 25, -5, 51, -62, -46, 116, 101, 119, -32, 104, -47, -123, 111, 83, 103, -76, -58, -16, 
			-104, -74, -72, 114, 71, -111, 102, 47, 91, 13, 79, 64, 110, -119, -51, 62, -120, 11, 5, 54, -115, -83, 109, 
			-1, -104, -122, -94, 105, 30, -98, 97, -34, -63, 13, 105, 100, 90, 30, 7, 44, 35, -106, -95, 43, 109, -45, 8, 
			-127, -125, 67, -119, 87, 2, -127, -127, 0, -95, 18, 30, -64, -8, 104, 94, 45, 65, 8, -78, 111, -83, 47, 97, 
			44, -84, -14, -19, 52, 98, 17, -72, 49, -111, 27, -57, 56, 125, -122, 55, -36, -38, -82, 85, -3, 126, -13, 44, 
			-95, -82, -21, 8, 120, 29, 3, 63, 17, 114, 0, -95, -91, 117, 25, 29, 77, -92, -121, -64, -113, -41, 63, -126, 
			7, -42, -31, 120, -38, -20, -93, -70, 42, 71, -112, 5, 121, 88, -73, 24, -59, -120, -14, 29, 12, -6, 22, -89, 
			-29, -47, 76, -122, -91, 81, -122, 36, -27, -7, 98, 78, 114, -101, -77, -111, -77, 116, 64, -51, 71, -26, -55, 
			76, 68, -90, 85, 26, -103, 82, -108, 45, -59, 59, 91, 106, 109, 72, -74, 6, -31, 2, -127, -127, 0, -120, -72, 
			-37, -112, 88, -81, -119, 17, 84, 0, 26, -80, 124, 59, 62, -92, 15, 69, 121, -59, 52, -98, 23, 61, -36, -78, 
			101, -15, -126, 116, -50, 41, -55, 100, 53, -55, 91, 118, 95, 2, -11, -3, -119, 73, 34, 60, 48, -58, -106, 
			-27, -57, 97, 60, 118, -61, -113, 58, 49, 25, -44, -12, 118, -36, 43, -114, 77, -121, -23, 114, -116, -21, -27, 
			-89, 96, -30, 25, -46, -51, -120, -80, -114, -13, 38, -36, -74, -55, -23, -15, 85, 4, -88, 22, -106, 63, -121, 
			6, 43, 98, -49, 36, -28, 6, -43, 93, -83, -44, -51, 12, -115, 23, -15, -115, 96, -43, -11, 114, -37, -35, -38, 
			4, -94, -45, 29, 108, -59, 26, 67, 91, 2, -127, -128, 6, 102, 59, -26, 122, -123, -68, -92, 92, -55, 77, -105, 
			46, -107, 14, -21, -35, 60, 100, -69, -121, -17, 60, -86, 48, 91, -24, -87, -19, 64, 60, -58, -10, -11, 100, 42, 
			40, 113, 38, -119, 119, -37, -53, -81, 43, 44, 29, 84, -27, 21, 13, -126, 70, 17, 93, 35, 25, -55, 22, 17, -24, 
			53, 69, -120, -58, -112, -99, 43, 44, -2, -107, 105, -83, 10, -13, -55, -30, 13, 111, -128, 113, 46, -78, 71, 37, 
			31, 94, -31, 57, -60, -123, 122, 98, 92, -98, -37, -50, -79, 113, 68, -124, -1, -46, 86, 29, 57, -78, -93, 44, 66, 
			17, -7, 2, -70, 41, -128, 29, -27, 71, 36, -57, 123, -37, 20, 73, 69, 71, 11
			};
	
	private static PrivateKey PrivateK = null;
	private static byte[] inputcontent = {3,6,1,12,53,53,12,53,64,56,87};
			
	public static boolean LoadPrivateK() {
		try {
			PKCS8EncodedKeySpec priPKCS8 = new PKCS8EncodedKeySpec(priKey);
			KeyFactory keyf = KeyFactory.getInstance("RSA");
			PrivateK = keyf.generatePrivate(priPKCS8);
		} catch (Exception e) {
			return false;
			// TODO: handle exception
		}
		return true;
	}
	
	public static byte[] signature(byte[] content) {
		byte [] signed;
		try {
			Signature sig = Signature.getInstance("SHA1withRSA");
			sig.initSign(PrivateK);
			sig.update(content);
			signed = sig.sign();
			
			return signed;
		} catch (Exception e) {
			return null;
			// TODO: handle exception
		}
	}
	
	static byte[] outSignature = signature(inputcontent);
	
	
	private static PublicKey PubkeyforVerif = null; 
	
	
	//加载公钥
	private static boolean LoadPubKey(){ 
		try {
	
			
				// 构造X509EncodedKeySpec对象
				X509EncodedKeySpec bobPubKeySpec = new X509EncodedKeySpec(pubKey);
				// RSA算法
				KeyFactory keyFactory = KeyFactory.getInstance("RSA");
				// 取公钥匙对象
				PubkeyforVerif = keyFactory.generatePublic(bobPubKeySpec);
				System.out.println("Get pubkey successfully!");
				System.out.println("PubkeyforVerify is :\n");
				System.out.println("==========================start===========================");
				System.out.println(PubkeyforVerif.toString());
				System.out.println("==========================end===========================\n");
			  	
			} catch (Exception e) {	
				System.out.println("Get pubkey Error!" );
				return false;
			} 
		
			return true;
		}
	//check signature
	public static int verify() {
		try {
			Signature signatureChecker = Signature.getInstance("SHA1withRSA");
			signatureChecker.initVerify(PubkeyforVerif);
		  	
		  	signatureChecker.update(outSignature);
		  	
		  	 // 验证签名是否正常
		  	if (signatureChecker.verify(outSignature)){
		  		System.out.println("RSA Verify: Successful!" );
	  		
		  	}
		  	else{
		  		//System.out.println("!!!***");	
		  		System.out.println("Verify: Failed!" );
		  		return -1;
		  	}
		}
		catch (Exception e) {
			System.out.println("Verify Error!" );
			return -1;
			// TODO: handle exception
		}
		return 1;
	}
	
	public static void main(String[] args) {
		if(LoadPrivateK()) {
			if(LoadPubKey()) {
				verify();
			}
		}
	}
	
}
